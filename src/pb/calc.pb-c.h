/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: calc.proto */

#ifndef PROTOBUF_C_calc_2eproto__INCLUDED
#define PROTOBUF_C_calc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Request Request;
typedef struct _Reply Reply;


/* --- enums --- */


/* --- messages --- */

struct  _Request
{
  ProtobufCMessage base;
  uint32_t a;
  uint32_t b;
};
#define REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request__descriptor) \
    , 0, 0 }


struct  _Reply
{
  ProtobufCMessage base;
  int64_t r;
};
#define REPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reply__descriptor) \
    , 0 }


/* Request methods */
void   request__init
                     (Request         *message);
size_t request__get_packed_size
                     (const Request   *message);
size_t request__pack
                     (const Request   *message,
                      uint8_t             *out);
size_t request__pack_to_buffer
                     (const Request   *message,
                      ProtobufCBuffer     *buffer);
Request *
       request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request__free_unpacked
                     (Request *message,
                      ProtobufCAllocator *allocator);
/* Reply methods */
void   reply__init
                     (Reply         *message);
size_t reply__get_packed_size
                     (const Reply   *message);
size_t reply__pack
                     (const Reply   *message,
                      uint8_t             *out);
size_t reply__pack_to_buffer
                     (const Reply   *message,
                      ProtobufCBuffer     *buffer);
Reply *
       reply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reply__free_unpacked
                     (Reply *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Request_Closure)
                 (const Request *message,
                  void *closure_data);
typedef void (*Reply_Closure)
                 (const Reply *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Calc_Service Calc_Service;
struct _Calc_Service
{
  ProtobufCService base;
  void (*add)(Calc_Service *service,
              const Request *input,
              Reply_Closure closure,
              void *closure_data);
  void (*sub)(Calc_Service *service,
              const Request *input,
              Reply_Closure closure,
              void *closure_data);
  void (*mul)(Calc_Service *service,
              const Request *input,
              Reply_Closure closure,
              void *closure_data);
  void (*div)(Calc_Service *service,
              const Request *input,
              Reply_Closure closure,
              void *closure_data);
};
typedef void (*Calc_ServiceDestroy)(Calc_Service *);
void calc__init (Calc_Service *service,
                 Calc_ServiceDestroy destroy);
#define CALC__BASE_INIT \
    { &calc__descriptor, protobuf_c_service_invoke_internal, NULL }
#define CALC__INIT(function_prefix__) \
    { CALC__BASE_INIT,\
      function_prefix__ ## add,\
      function_prefix__ ## sub,\
      function_prefix__ ## mul,\
      function_prefix__ ## div  }
void calc__add(ProtobufCService *service,
               const Request *input,
               Reply_Closure closure,
               void *closure_data);
void calc__sub(ProtobufCService *service,
               const Request *input,
               Reply_Closure closure,
               void *closure_data);
void calc__mul(ProtobufCService *service,
               const Request *input,
               Reply_Closure closure,
               void *closure_data);
void calc__div(ProtobufCService *service,
               const Request *input,
               Reply_Closure closure,
               void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor request__descriptor;
extern const ProtobufCMessageDescriptor reply__descriptor;
extern const ProtobufCServiceDescriptor calc__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_calc_2eproto__INCLUDED */
